Из журнала Demo or Die #2, 1999



 (C) by Devil of eTc/Scene'99

 FLAT - shading (освещенность по Ламберту)

  Итак в первом номере журнала Demo or Die
вы   наверняка   читали  статью  Wolf'а  о
различных        видах       освещенностей
треугольников.  В  данной  статье  я решил
развить   эту   тему   и   более   глубоко
рассмотреть  один  из наиболее простых и в
тоже самое время основных способов заливки
полигонов   с  освешенностью  по  Ламберту
(далее    Flat-shading).   Без   понимания
Flat-shading'a я думаю вам не стоит дальше
лезть в 3D-графику.

  Flat-shading  наиболее  простой и в тоже
время   наиболее   быстрый  метод  заливки
треугольника. Но так как в мире нет ничего
идеального, то он и наименее реалистичный.

  Для  начала  прийдется вспомнить немного
теории:

  Пусть  мы  имеем  три  вершины  A,B и C.
Первначально  точки  могут  быть  в  любом
положении на плоскости что-то вроде этого:
TABLENG
        DB 0      ;Y3
        DB 0      ;X3

        DB 100    ;Y1
        DB 0      ;X1

        DB 100    ;Y2
        DB 100    ;X2

Но   нам   надо   их  выстроить  в  строго
определенном   порядке  (как  показано  на
рисунке) т.е.  Y1 >= Y2 >= Y3

Применим процедуру сортировки:
;++++++++++++++++++++++++++++++++++++;
;Сортитовка вершин по Y1,Y2,Y3...    ;
;  В HL,TABLENG
;++++++++++++++++++++++++++++++++++++;
SORT    LD DE,HL
        INC HL,HL

        LD A,(DE)     ;заносим в А:=Y1
        LD C,(HL)     ;      а в С:=Y2
        CP C
        JR NC,NEXT1   ;сравниваем...

        LD (HL),A     ;Обмениваем местами
        LD A,C        ;Y1,X1<=>Y2,X2
        LD (DE),A     ;если Y1<Y2
        INC HL,DE
        LD A,(DE)
        LD C,A
        LD A,(HL)
        LD (HL),C
        LD (DE),A
        DEC DE,HL

NEXT1   INC HL,HL     ;заносим в А:=Y2
        LD A,(DE)     ;      а в А:=Y3
        LD C,(HL)
        CP C
        JR NC,NEXT2

        LD (HL),A     ;Обмениваем местами
        LD A,C        ;Y2,X2<=>Y3,X3
        LD (DE),A     ;если Y2<Y3
        INC HL,DE
        LD A,(DE)
        LD C,A
        LD A,(HL)
        LD (HL),C
        LD (DE),A
        DEC DE,HL

NEXT2   INC DE,DE     ;продолжаем в
        LD A,(DE)     ;томже стиле
        LD C,(HL)
        CP C
        RET NC

        LD (HL),A
        LD A,C
        LD (DE),A
        INC HL,DE
        LD A,(DE)
        LD C,A
        LD A,(HL)
        LD (HL),C
        LD (DE),A
        RET

  Вернемся  к  теории. Для расчета граней,
воспользуемся   процедурой   интерполяции.
Для этого создадим  2 буфера в которые бу-
дем  интерполировать  значения  координаты
X.
  Длина  первого  буфера  выходит из того,
что   SIZE = (Y1-Y2) + (Y2-Y3) = Y1-Y3,  а
длина   второго  буфера,  определяется  из
факта  что  SIZE:=Y1-Y3.  Значит по длинне
они будут одинаковые.
 
  В   первый   буфер,  мы  будем  заносить
проинтерполированные  значения координат X
на  стороне AB. (от X1 до X2 с количеством
интераций Y1-Y2):

        LD HL,(NUMB)     ;в HL,адрес табл.
        LD A,(HL)        ;в А,Y1
        INC HL
        LD B,(HL)        ;в B,X1
        INC HL
        LD C,(HL)        ;в С,Y2
        SUB C            ;в A,SIZE=(Y1-Y2)
        LD (PUTPOLY+1),A
        LD E,A           ;в E,SIZE
        INC HL
        LD A,(HL)        ;в A,X2

        LD HL,BUFFER1
        CALL INTER       ;инетерполируем

  Вслед   за  этим  (продолжаем  заполнять
первый   буфер)   интерполируем   значения
координаты X на стороне BC. (от X2 до X3 с
количеством интераций Y2-Y3):

        PUSH HL       ;запоминем адрес
        LD HL,(NUMB)  ;буфера
        INC HL,HL
        LD A,(HL)     ;в А,Y2
        INC HL
        LD B,(HL)     ;в В,X2
        INC HL
        LD C,(HL)     ;в С,Y3
        SUB C         ;в А=Y2-Y3
        LD E,A
        INC HL
        LD A,(HL)     ;в А,X3
        POP HL        ;вспоминаем адр.
        CALL INTER    ;и вперед!..

  И наконец  второй  буфер,  мы  заполняем
проинтерполированными значениями координа-
ты  X  на  стороне  AD.  (от  X1  до  X3 с
количеством интераций Y1-Y3):

        LD HL,(NUMB)
        LD A,(HL)
        LD (PUTPOL2+1),A
        INC HL
        LD B,(HL)
        INC HL,HL,HL
        LD C,(HL)
        SUB C
        LD E,A
        LD (PUTPOL0+1),A
        INC HL
        LD A,(HL)

        LD HL,BUFFER2
        CALL INTER

  По   адресу   COLOR+1   находится  номер
текстуры  из  таблицы  DTDAT,  которой  мы
рисуем полигон.
  Расчитаем  адрес  нужной  нам текстуры и
перенесем 4-байта по адресу TEXTURA.

COLOR   LD A,0
        ADD A,A,A,A
        LD H,DTDAT[
        LD L,A
        LD DE,TEXTURA

.4      LDI
        XOR A
        LD (LINE+1),A

  Дальше  все  совсем просто, нам осталось
только    построить    на   экран   нужное
количество горизонтальных линий и получить
долгожданный треугольник.
  Вот пример реализации данного алгоритма:

PUTPOLY LD HL,BUFFER1
        LD A,(HL)     ;проверяем в каком
        INC H         ;буфере значения
        CP (HL)       ;меньше.
        LD DE,BUFFER1
        LD HL,BUFFER2
        JR C,PUTPOL1
        EX DE,HL
PUTPOL1 LD A,(DE)     ;берем в A=XB1
        PUSH DE
        LD B,(HL)     ;в B=XB2
        PUSH HL
PUTPOL2 LD E,0        ;в L=Y_CORD
        LD C,A
        CALL LINE     ;рисуем линию
        LD HL,PUTPOL2+1
        DEC (HL)      ;поднимаемся выше
        POP HL,DE     ;по экрану
        INC DE,HL
PUTPOL0 LD A,0        ;проверяем конец
        DEC A         ;буфера
        LD (PUTPOL0+1),A
        JR NZ,PUTPOL1
        RET

;=========================================
;ГОРИЗОНТАЛЬНАЯ ЛИНИЯ by DeVil FRoM EtC
;             + ТЕКСТУРА!!!
;=========================================
; C: X1
; B: X2    (X1<X2)
;HL: ADDR
;  ПО  адресу  TEXTURA  находится  4-байта
;текушей  текстуры,  а  по  адресу  LINE+1
;находится  номер байта в текстуре которую
;мы рисуем в данной линии
;-----------------------------------------

LINE    LD A,0
        INC A
        AND #03
        LD (LINE+1),A
        LD L,A
        LD H,TEXTURA[
        LD A,(HL)
        LD LX,A
        LD L,E

        INC H
        LD D,(HL)
        INC H
        LD A,(HL)
        INC H
        LD L,C
        OR (HL)
        LD E,A
        EX DE,HL

        LD A,C
        AND 7
        LD E,A
        INC D
        LD A,(DE)
        AND (HL)
        LD HX,A
        LD A,(DE)
        XOR #FF
        AND LX
        OR HX

        EX AF,AF

        LD A,B
        SUB C
        ADD A,E

        SUB 8
        JR C,LINE2

        EX AF,AF
        LD (HL),A
        EX AF,AF

        LD E,LX
LINE0   SUB 8
        JR C,LINE1
        INC L
        LD (HL),E
        JP LINE0


LINE1   INC L
        LD A,B
        AND 7
        LD E,A
        INC D
        LD A,(DE)
        AND (HL)
        LD HX,A
        LD A,(DE)
        XOR #FF
        AND LX
        OR HX
        LD (HL),A
        RET
LINE2
        LD A,C
        AND 7
        LD E,A
        INC D
        LD A,(DE)
        LD C,A
        LD A,B
        AND 7
        LD E,A
        DEC D
        LD A,(DE)
        AND C
        LD C,A
        XOR #FF
        AND (HL)
        LD B,A
        LD A,C
        AND LX
        OR B
        LD (HL),A
        RET

  Кстати, как вы наверняка заметили, линия
получилась  с  наложеной текстурой, взятой
из  статьи  'CHANKS...',  ее  смело можете
менять  на  свою. Таблица чанков находится
по адресу DTDAT.
  Кстати,     для     нормальной    работы
приведенной   выше   процедуры   рисования
линии,  перед  ее  вызовом,  надо  создать
таблицу  адресов экрана, вызвав что-нибудь
типа:

IN_TABL LD HL,TABLADR
        LD DE,#4000
        LD B,192
INTAB1  LD (HL),D
        INC H
        LD (HL),E
        DEC H
        INC L
        CALL DON_DE
        DJNZ INTAB1

        INC H,H
        LD L,0

        LD D,0
        LD B,31
INTAB2  LD C,8
INTAB3  LD (HL),D
        INC L
        DEC C
        JR NZ,INTAB3
        INC D
        DJNZ INTAB2
        RET

DON_DE
        INC D
        LD A,D
        AND 7
        RET NZ
        LD A,E
        ADD A,32
        LD E,A
        RET C
        LD A,D
        SUB 8
        LD D,A
        RET

;+++++++++++++++++++++++++++
; Прочее.........
;+++++++++++++++++++++++++++
        ORG (($-1)[+1)*256

DTDAT   ;16 COLORS DITHER DATA
        DB #00,#00,#00,#00
        DB #00,#00,#00,#00
        DB #88,#00,#00,#00
        DB #88,#00,#22,#00
        DB #AA,#00,#22,#00
        DB #AA,#00,#AA,#00
        DB #AA,#44,#AA,#00
        DB #AA,#44,#AA,#11
        DB #AA,#55,#AA,#55
        DB #AA,#DD,#AA,#77
        DB #AA,#77,#AA,#FF
        DB #AA,#FF,#AA,#FF
        DB #AA,#FF,#BB,#FF
        DB #EE,#FF,#BB,#FF
        DB #EE,#FF,#FF,#FF
        DB #FF,#FF,#FF,#FF

        ORG (($-1)[+1)*256
BUFFER1 DS 196
        ORG (($-1)[+1)*256
BUFFER2 DS 196


        ORG (($-1)[+1)*256
TEXTURA DB #AA,#44,#AA,#00

        ORG (($-1)[+1)*256

TABLADR DS 256*3


        ORG (($-1)[+1)*256

LNT1
        DB 0
        DB %10000000
        DB %11000000
        DB %11100000
        DB %11110000
        DB %11111000
        DB %11111100
        DB %11111110


        ORG (($-1)[+1)*256

LNT2
        DB %11111111
        DB %01111111
        DB %00111111
        DB %00011111
        DB %00001111
        DB %00000111
        DB %00000011
        DB %00000001

  Предлагаю   также   немного   улучшенную
процедуру       ИНТЕРПОЛЯЦИИ.       Версия
предложенная  в первом номере Demo or Die,
некоректно  обрабатывала  ситуации,  когда
надо  было  проинтерполировать два числа в
один  или ноль шагов. Логично предположить
что это ошибочная ситуация, однако в нашей
программе  она  может возникнуть и ее надо
правильно обработать.

;++++++++++++++++++++++++++++++++++++++;
;           INTERPOLATIONS             ;
;                                      ;
;     best idea:  Wolf/eTc/ScEnE       ;
;    perfect code: Devil/eTc/sCeNE     ;
;                                      ;
; HL = BUFFER                          ;
; E =  LEN OF BUFFER                   ;
; B =  X1                              ;
; A =  X2                              ;
;++++++++++++++++++++++++++++++++++++++;


INTER   LD HX,B
        CP B

        LD C,A
        LD D,A

        EX AF,AF
        LD A,E
        CP 2
        JR C,INTER7
        EX AF,AF

        LD A,#04
        JR NC,INTER6
        LD A,#05
        LD D,B
        LD B,C

INTER6
        LD (INTER5),A
        LD (INCDEC),A
        LD A,D

        SUB B
        LD B,HX
        CP E
        JR C,INTER0
        JR Z,INTER0

INTER3  LD C,A
        DEC E
        LD D,E
        LD (HL),B
INTER4  SUB E
        JR NC,INTER5
        INC HL
        LD (HL),B
        ADD A,C
        DEC D
        RET Z
INTER5  INC B
        JP INTER4
        INC HL
        RET

INTER0  INC A
        LD C,A
        LD D,E
        LD A,E
INTER1  SUB C
        JR NC,INTER2
        ADD A,E
INCDEC  INC B
INTER2  LD (HL),B
        INC HL
        DEC D
        JR NZ,INTER1
        RET

INTER7  LD (HL),C
        INC HL
        RET

  На   этом   все  трудности  закончились.
Однако  у  читателя могут возникнуть такие
вопросы:
  -  Почему  в моих исходниках для расчета
граней       использовалась      процедура
интерполяции,  тогда  как  многие  сначала
считают  коэфициенты  для  трех  граней  а
потом простым сложенем получают грань?
  Ответ.  Во первых такой метод уже не раз
описывался,  а во вторых представте что мы
имеем  много очень мелких полигонов, тогда
на  расчет  коэфициентов  каждого полигона
потребуется    не   меньше   3000   тактов
(независимо от размеров полигона), да плюс
сложение  для  каждой  линии, а при помощи
описаного   мной   метода  -  при   мелких
полигонах  получится  значительно быстрее.
При     полигонах     больших     размеров
целесообразнее  использовать расчет граней
по коэфициентам.

  Все  вышеприведенные  исходники написаны
на   скорую   руку  и  пригодны  лишь  для
примера,   использовать  их  можно  только
после  тотальной оптимизации. Ну а рабочий
исходник ищите где-то в приложении.
  При  написании  использовался  ассемблер
Storm v1.3 (by X-Trade).

  Вопросы,  предложения  и отзывы шлите на
адрес   2:4536/100.128@FidoNet  to  Sergey
Movchan.
__________________________________________